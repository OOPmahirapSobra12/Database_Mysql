create database if not exists Project;
use Project;
CREATE TABLE IF NOT EXISTS accounts (
    username VARCHAR(100) NOT NULL,
    pword VARCHAR(50) NOT NULL,
    fname VARCHAR(100) NOT NULL,
    lname VARCHAR(100) NOT NULL,
    ID VARCHAR(100) NOT NULL PRIMARY KEY ,
    course_name varchar(100),
	sections varchar(50),
    accesslevel VARCHAR(100) NOT NULL,
    image BLOB,  -- Column to store image data (BLOB type)
	FOREIGN KEY (sections) REFERENCES section(sections),
    FOREIGN KEY (course_name) REFERENCES courses(course_name)
);

create table if not exists courses(
course_name varchar(100) not null primary key
);

CREATE TABLE IF NOT EXISTS section (
    sections VARCHAR(100) primary key not NULL,
    course_name varchar(100),
    FOREIGN KEY (course_name) REFERENCES courses(course_name) -- Referencing 'course_ID' in 'course' table
);

create table if not exists listofsubjects(
    subject_name VARCHAR(100) primary key,
    sections VARCHAR(100),
    course_name VARCHAR(100),
    FOREIGN KEY (sections) REFERENCES section(sections),
    FOREIGN KEY (course_name) REFERENCES courses(course_name)
);



create table if not exists requests(
ID varchar(100) not null,
room_code varchar(100) not null,
request varchar(500) not null,
request_d varchar(100) not null,
request_t varchar(100) not null,
request_t_in varchar(100) not null,
request_t_out varchar(100) not null,
requestID int not null primary key auto_increment,
request_type varchar(100),
foreign key (ID) references accounts(ID),
foreign key (room_code) references roomlist(room_code)
);

create table if not exists sched(
room_code varchar(100) not null primary key, 
room_time_in varchar(100) not null,
room_time_out varchar(100) not null,
room_day varchar(100) not null,
shed_id varchar(100) not null ,
    subject_name VARCHAR(100),
    sections VARCHAR(100),
    course_name VARCHAR(100),
    FOREIGN KEY (subject_name) REFERENCES listofsubjects(subject_name),
    FOREIGN KEY (sections) REFERENCES section(sections),
    FOREIGN KEY (course_name) REFERENCES courses(course_name),
    foreign key (room_code) references roomlist(room_code)
);

create table if not exists schedtemp(
room_code varchar(100) not null primary key,
room_time_in varchar(100) not null,
room_time_out varchar(100) not null,
room_date varchar(100) not null,
shed_id varchar(100) not null,
    subject_name VARCHAR(100),
    sections VARCHAR(100),
    course_name VARCHAR(100),
    FOREIGN KEY (subject_name) REFERENCES listofsubjects(subject_name),
    FOREIGN KEY (sections) REFERENCES section(sections),
    FOREIGN KEY (course_name) REFERENCES courses(course_name),
    foreign key (room_code) references roomlist(room_code)
);

CREATE TABLE IF NOT EXISTS roomlist (
    room_code VARCHAR(100) NOT NULL PRIMARY KEY,
    room_name VARCHAR(100) NOT NULL,
    building VARCHAR(100) NOT NULL,
    num_chairs INT NOT NULL,
    num_computers INT,   -- Number of computers
    num_laptops INT,     -- Number of laptops
    occupancy_status VARCHAR(20) NOT NULL, -- Options: 'Occupied' or 'Not Occupied'
    room_status VARCHAR(20) NOT NULL      -- Options: 'Open' or 'Closed'
);

create table if not exists feedback(
ID varchar(100) not null,
feedbackid varchar(100) not null,
d varchar(100) not null,
t varchar(100) not null,
feedback varchar(500) not null,
foreign key (ID) references accounts(ID)
);

create table if not exists report(
ID varchar(100) not null,
reportid int not null primary key auto_increment,
d varchar(100) not null,
t varchar(100) not null,
report varchar(500) not null,
foreign key (ID) references accounts(ID)
);
 
 CREATE TABLE IF NOT EXISTS logshistory ( -- room login
    ID VARCHAR(100) NOT NULL,
    log_in_date VARCHAR(100) NOT NULL,
    log_in_time VARCHAR(100) NOT NULL,
    log_out_date VARCHAR(100) DEFAULT NULL,
    log_out_time VARCHAR(100) DEFAULT NULL,
	room_code varchar(100) not null,
    log_history_code INT PRIMARY KEY AUTO_INCREMENT,
    foreign key (room_code) references roomlist(room_code),
    foreign key (ID) references accounts(ID)
);

CREATE TABLE IF NOT EXISTS login_history ( -- log in history
    ID VARCHAR(100) NOT NULL,
    log_in_date VARCHAR(100) NOT NULL,
    log_in_time VARCHAR(100) NOT NULL,
    log_out_date VARCHAR(100) DEFAULT NULL,
    log_out_time VARCHAR(100) DEFAULT NULL,
    log_history_code INT PRIMARY KEY AUTO_INCREMENT,
    foreign key (ID) references accounts(ID)
);

CREATE TABLE IF NOT EXISTS staff_request_log ( -- staff, using admin, history
    ID VARCHAR(100) NOT NULL,
    log_in_date VARCHAR(100) NOT NULL,
    log_in_time VARCHAR(100) NOT NULL,
    log_out_date VARCHAR(100) DEFAULT NULL,
    log_out_time VARCHAR(100) DEFAULT NULL,
    log_history_code INT PRIMARY KEY AUTO_INCREMENT,
    foreign key (ID) references accounts(ID)
);

create table if not exists past_schedtemp (
	room_code varchar(100) not null primary key,
	room_time_in varchar(100) not null,
	room_time_out varchar(100) not null,
	room_date varchar(100) not null,
	shed_id varchar(100) not null,
    subject_name VARCHAR(100),
    sections VARCHAR(100),
    course_name VARCHAR(100),
    FOREIGN KEY (subject_name) REFERENCES listofsubjects(subject_name),
    FOREIGN KEY (sections) REFERENCES section(sections),
    FOREIGN KEY (course_name) REFERENCES courses(course_name),
    foreign key (room_code) references roomlist(room_code)
);

create table if not exists denied_request(
	ID VARCHAR(100) NOT NULL,
    room_code varchar(100) not null,
	request varchar(500) not null,
    foreign key (ID) references accounts(ID),
    foreign key (room_code) references roomlist(room_code)
);

create table if not exists accepted_request(
	ID VARCHAR(100) NOT NULL,
    room_code varchar(100) not null,
	request varchar(500) not null,
    foreign key (ID) references accounts(ID),
    foreign key (room_code) references roomlist(room_code)
)
