CREATE DATABASE IF NOT EXISTS Project;
USE Project;

-- Create 'courses' table
CREATE TABLE IF NOT EXISTS courses (
	course_id int unique auto_increment,
    course_name VARCHAR(100) NOT NULL PRIMARY KEY
);

-- Create 'section' table
CREATE TABLE IF NOT EXISTS section (
    sections VARCHAR(100) PRIMARY KEY NOT NULL,
    course_name VARCHAR(100),
    FOREIGN KEY (course_name) REFERENCES courses(course_name) on update cascade on delete restrict
);

-- Create 'roomlist' table
CREATE TABLE IF NOT EXISTS roomlist (
    room_code VARCHAR(100) NOT NULL PRIMARY KEY,
    room_name VARCHAR(100) NOT NULL,
    building VARCHAR(100) NOT NULL,
    num_chairs INT NOT NULL,
    num_computers INT,   -- Number of computers
    num_laptops INT,     -- Number of laptops
    occupancy_status VARCHAR(20) NOT NULL, -- Options: 'Occupied' or 'Not Occupied'
    room_status VARCHAR(20) NOT NULL      -- Options: 'Open' or 'Closed'
);

-- Create 'accounts' table
CREATE TABLE IF NOT EXISTS accounts (
    username VARCHAR(100) NOT NULL,
    pword VARCHAR(50) NOT NULL,
    fname VARCHAR(100) NOT NULL,
    lname VARCHAR(100) NOT NULL,
    ID VARCHAR(100) NOT NULL PRIMARY KEY,
    course_name VARCHAR(100),
    sections VARCHAR(50),
    accesslevel VARCHAR(100) NOT NULL,
    image BLOB, -- Column to store image data (BLOB type)
    FOREIGN KEY (course_name) REFERENCES courses(course_name) on update cascade on delete restrict,
    FOREIGN KEY (sections) REFERENCES section(sections) on update cascade on delete restrict -- Foreign key for 'sections'
);

-- Create 'listofsubjects' table
CREATE TABLE IF NOT EXISTS listofsubjects (
	subject_id int unique auto_increment,
    subject_name VARCHAR(100) PRIMARY KEY,
    sections VARCHAR(100),
    course_name VARCHAR(100),
    FOREIGN KEY (course_name) REFERENCES courses(course_name) on update cascade on delete restrict, 
    FOREIGN KEY (sections) REFERENCES section(sections) on update cascade on delete restrict -- Foreign key for 'sections'
);

-- Create 'requests' table
CREATE TABLE IF NOT EXISTS requests (
    ID VARCHAR(100) NOT NULL,
    room_code VARCHAR(100) NOT NULL,
    request VARCHAR(500) NOT NULL,
    request_d VARCHAR(100) NOT NULL, -- requested date or day
    request_t_in VARCHAR(100) NOT NULL,
    request_t_out VARCHAR(100) NOT NULL,
    requestID INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    request_type VARCHAR(100), -- accepted or denied
    FOREIGN KEY (ID) REFERENCES accounts(ID) on update cascade on delete restrict,
    FOREIGN KEY (room_code) REFERENCES roomlist(room_code) on update cascade on delete restrict
);

-- Create 'sched' table
CREATE TABLE IF NOT EXISTS sched (
    room_code VARCHAR(100) NOT NULL PRIMARY KEY,
    room_time_in VARCHAR(100) NOT NULL,
    room_time_out VARCHAR(100) NOT NULL,
    room_day VARCHAR(100) NOT NULL,
    shed_id VARCHAR(100) unique
    ,
    subject_name VARCHAR(100),
    sections VARCHAR(100),
    course_name VARCHAR(100),
    FOREIGN KEY (subject_name) REFERENCES listofsubjects(subject_name) on update cascade on delete restrict,
    FOREIGN KEY (course_name) REFERENCES courses(course_name) on update cascade on delete restrict,
    FOREIGN KEY (room_code) REFERENCES roomlist(room_code) on update cascade on delete restrict,
    FOREIGN KEY (sections) REFERENCES section(sections) on update cascade on delete restrict -- Foreign key for 'sections'
);

-- Create 'schedtemp' table
CREATE TABLE IF NOT EXISTS schedtemp (
    room_code VARCHAR(100) NOT NULL PRIMARY KEY,
    room_time_in VARCHAR(100) NOT NULL,
    room_time_out VARCHAR(100) NOT NULL,
    room_date VARCHAR(100) NOT NULL,
    shedTEPM_id VARCHAR(100) NOT NULL,
    subject_name VARCHAR(100),
    sections VARCHAR(100),
    course_name VARCHAR(100),
    FOREIGN KEY (subject_name) REFERENCES listofsubjects(subject_name) on update cascade on delete restrict,
    FOREIGN KEY (course_name) REFERENCES courses(course_name) on update cascade on delete restrict,
    FOREIGN KEY (room_code) REFERENCES roomlist(room_code) on update cascade on delete restrict,
    FOREIGN KEY (sections) REFERENCES section(sections) on update cascade on delete restrict -- Foreign key for 'sections'
);

-- Create 'feedback' table
CREATE TABLE IF NOT EXISTS feedback (
    ID VARCHAR(100) NOT NULL,
    feedbackid INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    d VARCHAR(100) NOT NULL,
    t VARCHAR(100) NOT NULL,
    feedback VARCHAR(500) NOT NULL,
    FOREIGN KEY (ID) REFERENCES accounts(ID) on update cascade on delete restrict
);

-- Create 'report' table
CREATE TABLE IF NOT EXISTS report (
    ID VARCHAR(100) NOT NULL,
    reportid INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    d VARCHAR(100) NOT NULL,
    t VARCHAR(100) NOT NULL,
    report VARCHAR(500) NOT NULL,
    FOREIGN KEY (ID) REFERENCES accounts(ID) on update cascade on delete restrict
);

-- Create 'logshistory' table (room login history)
CREATE TABLE IF NOT EXISTS room_logshistory (
    ID VARCHAR(100) NOT NULL,
    log_in_date VARCHAR(100) NOT NULL,
    log_in_time VARCHAR(100) NOT NULL,
    log_out_date VARCHAR(100) DEFAULT NULL,
    log_out_time VARCHAR(100) DEFAULT NULL,
    room_code VARCHAR(100) NOT NULL,
    log_history_code INT PRIMARY KEY AUTO_INCREMENT,
    FOREIGN KEY (room_code) REFERENCES roomlist(room_code) on update cascade on delete restrict,
    FOREIGN KEY (ID) REFERENCES accounts(ID) on update cascade on delete restrict
);

-- Create 'login_history' table (log in history)
CREATE TABLE IF NOT EXISTS login_history (
    ID VARCHAR(100) NOT NULL,
    log_in_date VARCHAR(100) NOT NULL,
    log_in_time VARCHAR(100) NOT NULL,
    log_out_date VARCHAR(100),
    log_out_time VARCHAR(100),
    log_history_code INT PRIMARY KEY AUTO_INCREMENT,
    FOREIGN KEY (ID) REFERENCES accounts(ID) on update cascade on delete restrict
);

-- Create 'staff_request_log' table (staff history using admin)
CREATE TABLE IF NOT EXISTS staff_request_log (
    ID VARCHAR(100) NOT NULL,
    log_in_date VARCHAR(100) NOT NULL,
    log_in_time VARCHAR(100) NOT NULL,
    log_out_date VARCHAR(100),
    log_out_time VARCHAR(100),
    log_history_code INT PRIMARY KEY AUTO_INCREMENT,
    FOREIGN KEY (ID) REFERENCES accounts(ID) on update cascade on delete restrict
);

-- Create 'past_schedtemp' table
CREATE TABLE IF NOT EXISTS past_schedtemp (
    room_code VARCHAR(100) NOT NULL PRIMARY KEY,
    room_time_in VARCHAR(100) NOT NULL,
    room_time_out VARCHAR(100) NOT NULL,
    room_date VARCHAR(100) NOT NULL,
    shed_id VARCHAR(100) NOT NULL,
    subject_name VARCHAR(100),
    sections VARCHAR(100),
    course_name VARCHAR(100),
    FOREIGN KEY (subject_name) REFERENCES listofsubjects(subject_name) on update cascade on delete restrict, 
    FOREIGN KEY (sections) REFERENCES section(sections) on update cascade on delete restrict, -- Foreign key for 'sections'
    FOREIGN KEY (course_name) REFERENCES courses(course_name) on update cascade on delete restrict,
    FOREIGN KEY (room_code) REFERENCES roomlist(room_code) on update cascade on delete restrict
);

-- Create 'denied_request' table
CREATE TABLE IF NOT EXISTS denied_request (
    ID VARCHAR(100) NOT NULL,
    requestID VARCHAR(100) NOT NULL,
    request VARCHAR(500) NOT NULL,
    request_type VARCHAR(100), -- accepted or denied
    FOREIGN KEY (ID) REFERENCES accounts(ID) on update cascade on delete restrict
);

-- Create 'accepted_request' table
CREATE TABLE IF NOT EXISTS accepted_request (
    ID VARCHAR(100) NOT NULL,
    requestID VARCHAR(100) NOT NULL,
    request VARCHAR(500) NOT NULL,
    request_type VARCHAR(100), -- accepted or denied
    FOREIGN KEY (ID) REFERENCES accounts(ID) on update cascade on delete restrict
);
